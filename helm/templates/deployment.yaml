apiVersion: apps/v1
kind: Deployment
metadata:
  name: {{ include "Ephemeral-Environments.name" . }}
  labels:
    {{- include "Ephemeral-Environments.labels" . | nindent 4 }}
    app.kubernetes.io/role: api
    app.kubernetes.io/lang: golang
    app.kubernetes.io/tier: backend
spec:
  {{- if not .Values.autoscaling.enabled }}
  replicas: {{ .Values.replicaCount }}
  {{- end }}
  selector:
    matchLabels:
      {{- include "Ephemeral-Environments.selectorLabels" . | nindent 6 }}
  strategy:
    {{- toYaml .Values.deployStrategy | nindent 4 }}
  template:
    metadata:
      {{- if eq .Values.service.create true }}
      annotations:      
        proxy.istio.io/config: '{ "holdApplicationUntilProxyStarts": true }'
      {{- else }}
      annotations:      
        sidecar.istio.io/inject: "false"
      {{- end }}          
      labels:
        {{- include "Ephemeral-Environments.selectorLabels" . | nindent 8 }}
    spec:
      {{- with .Values.imagePullSecrets }}
      imagePullSecrets:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.affinity }}
      affinity:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      serviceAccountName: {{ include "Ephemeral-Environments.serviceAccountName" . }}
      securityContext:
        {{- toYaml .Values.podSecurityContext | nindent 8 }}
      containers:
        - name: {{ lower .Chart.Name }}
          securityContext:
            {{- toYaml .Values.securityContext | nindent 12 }}
          image: "{{ .Values.image.repository }}:{{ .Values.image.tag | default .Chart.AppVersion }}"
          imagePullPolicy: {{ .Values.image.pullPolicy }}
          {{- with .Values.containerPorts }}
          ports:
            {{- toYaml . | nindent 12 }}
          {{ end }}
          {{- with .Values.livenessProbe }}
          livenessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          {{- with .Values.readinessProbe }}
          readinessProbe:
            {{- toYaml . | nindent 12 }}
          {{- end }}
          resources:
            {{- toYaml .Values.resources | nindent 12 }}
          {{- if .Values.app.envs }}
          env:
            {{- range $key, $val := .Values.app.envs }}
            - name: {{ upper $key }}
              value: {{ required (printf ".Values.app.envs.%s is required" $key ) $val | quote }}
            {{- end }}
          {{- end }}
          {{- if .Values.app.secrets }}
          envFrom:
            - secretRef:
                name: {{ include "Ephemeral-Environments.name" . }}-secrets
          {{- end }}
      {{- with .Values.nodeSelector }}
      nodeSelector:
        {{- toYaml . | nindent 8 }}
      {{- end }}
      {{- with .Values.tolerations }}
      tolerations:
        {{- toYaml . | nindent 8 }}
      {{- end }}
